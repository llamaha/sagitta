use serde::{Deserialize, Serialize};
use serde_json::Value;

/// Canonical structure representing a single streamed tool-result chunk that the
/// ReasoningEngine emits and the Sagitta Code UI consumes. Keeping this type in
/// `terminal-stream` ensures the engine and the UI depend on the exact same
/// definition and (de)serialisation logic.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UiToolResultChunk {
    /// Unique identifier for this streamed chunk (independent from the tool call
    /// id generated by the ReasoningEngine).
    pub id: String,
    /// Identifier of the originating `ToolCall` â€“ this allows the UI to link
    /// result-cards back to the tool invocation.
    pub tool_call_id: String,
    /// Name of the executed tool (e.g. `web_search`).
    pub name: String,
    /// Whether the tool executed successfully.
    pub success: bool,
    /// Arbitrary JSON payload returned by the tool implementation.
    pub data: Value,
    /// Optional error message when `success == false`.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
} 